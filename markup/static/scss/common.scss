$max-width: 100%;
$max-cols: 12;

// sx: < sm
$media: (lg: 1200px, md: 992px, sm: 768px, sx: 320px);

@mixin width($col) {
  width: $max-width / $max-cols * $col;
}

// @mixin width-media($param) {
//   @each $med, $col in $param {

//     @if $med == "lg" {
//       @media (min-width: map-get($media, "lg")) {
//         @include width($col);
//       }
//     }
//     @else if $med == "md" {
//       @media (min-width: map-get($media, "md")) {
//         @include width($col);
//       }
//     }
//     @else if $med == "sm" {
//       @media (min-width: map-get($media, "sm")) {
//         @include width($col);
//       }
//     }
//     @else if $med == "sx" {
//       @media (max-width: map-get($media, "sx")) {
//         @include width($col);
//       }
//     }
//     @else {
//       @include width($col);
//     }
//   }
// }

// @mixin respond-to($media) {
//   @if $media == handhelds {
//     @media only screen and (max-width: 479px) { @content; }
//   }
//   @else if $media == wide-handhelds {
//     @media only screen and (min-width: 480px) and (max-width: 767px) { @content; }
//   }
//   @else if $media == tablets {
//     @media only screen and (min-width: 768px) and (max-width: 959px) { @content; }
//   }
//   @else if $media == laptop {
//     @media only screen and (min-width: 959px) and (max-width: 1200px) { @content; }
//   }
//   @else if $media == desktop {
//     @media only screen and (min-width: 1200px) and (max-width: 1366px) { @content; }
//   }
//   @else if $media == bigdesktop {
//     @media only screen and (min-width: 1366px) and (max-width: 1920px) { @content; }
//   }
// }



// @for $i from 1 through 12 {
//   .w_lg-#{$i} {
//     @include respond-to(bigdesktop) {
//       width: $max-width / 12 * $i;
//     };
//     padding-left: $padding;
//     padding-right: $padding;
//     box-sizing: border-box;
//   }
// }

// @for $i from 1 through 12 {
//   .w_md-#{$i} {
//     @include respond-to(desktop) {
//       width: $max-width / 12 * $i;
//     };
//     padding-left: $padding;
//     padding-right: $padding;
//     box-sizing: border-box;
//   }
// }

// @for $i from 1 through 12 {
//   .w_sm-#{$i} {
//     @include respond-to(laptop) {
//       width: $max-width / 12 * $i;
//     };
//     padding-left: $padding;
//     padding-right: $padding;
//     box-sizing: border-box;
//   }
// }

// @for $i from 1 through 12 {
//   .w_xs-#{$i} {
//     @include respond-to(tablets) {
//       width: $max-width / 12 * $i;
//     };
//     padding-left: $padding;
//     padding-right: $padding;
//     box-sizing: border-box;
//   }
// }

// @for $i from 1 through 12 {
//   .w_xs-#{$i} {
//     @include respond-to(wide-handhelds) {
//       width: $max-width / 12 * $i;
//     };
//     padding-left: $padding;
//     padding-right: $padding;
//     box-sizing: border-box;
//   }
// }

// @for $i from 1 through 12 {
//   .w_xs-#{$i} {
//     @include respond-to(handhelds) {
//       width: $max-width / 12 * $i;
//     };
//     padding-left: $padding;
//     padding-right: $padding;
//     box-sizing: border-box;
//   }
// }



// .box {
//   display: flex;
//   flex-wrap: wrap;

//   @include respond-to(bigdesktop) {
//     font-size: 24px;
//   };

//   @include respond-to(desktop) {
//     font-size: 22px;
//   };

//   @include respond-to(laptop) {
//     font-size: 18px;
//     color: red;
//   };

//   @include respond-to(tablets) {
//     font-size: 16px;
//   };

//   @include respond-to(wide-handhelds) {
//     font-size: 14px;
//   };

//   @include respond-to(handhelds) {
//     font-size: 12px;
//   };

//   // &__item {
//   //   @include width-media((lg: 3, md: 3, sm: 6, sx: 12));
//   // }
// }



// Sass map
$colors: (
  primary: #333,
  secondary: #555,
  brand: #ff0033
);

// .box {
//   color: map-get($colors, primary);
// }

$breakpoints: (
  xs: 448px,
  sm: 672px,
  md: 1008px,
  lg: 1344px,
  xl: 1428px,
  xx: 1680px
);

@mixin break($size) {  
  @media (min-width: map-get($breakpoints, $size)) {
    @content;
  }
}

// .box {
//   @include break(xx) {
//     font-size: 24px;
//   }
// }


// @each $key, $value in $breakpoints {
//   .item-#{$key} {
//     color: $value;
//   }
// }

// количество элементов
$items: 12;

// grid container
.grid {
  display: flex;
  flex-flow: row wrap;
}

@each $key, $value in $breakpoints {

  @for $i from 1 through $items {
    .w_#{$key}-#{$i} {
      @include break($key) {
        //flex: 0 0 #{$i / $items * 100}%;
        width: $max-width / $items * $i;
      }
    }
  }

}

.box {


}

